// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: ticket/ticket.proto

package ticket

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TicketStatus int32

const (
	TicketStatus_OPEN        TicketStatus = 0
	TicketStatus_IN_PROGRESS TicketStatus = 1
	TicketStatus_PENDING     TicketStatus = 2
	TicketStatus_RESOLVED    TicketStatus = 3
	TicketStatus_CLOSED      TicketStatus = 4
)

// Enum value maps for TicketStatus.
var (
	TicketStatus_name = map[int32]string{
		0: "OPEN",
		1: "IN_PROGRESS",
		2: "PENDING",
		3: "RESOLVED",
		4: "CLOSED",
	}
	TicketStatus_value = map[string]int32{
		"OPEN":        0,
		"IN_PROGRESS": 1,
		"PENDING":     2,
		"RESOLVED":    3,
		"CLOSED":      4,
	}
)

func (x TicketStatus) Enum() *TicketStatus {
	p := new(TicketStatus)
	*p = x
	return p
}

func (x TicketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ticket_ticket_proto_enumTypes[0].Descriptor()
}

func (TicketStatus) Type() protoreflect.EnumType {
	return &file_ticket_ticket_proto_enumTypes[0]
}

func (x TicketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketStatus.Descriptor instead.
func (TicketStatus) EnumDescriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{0}
}

type TicketPriority int32

const (
	TicketPriority_LOW    TicketPriority = 0
	TicketPriority_MEDIUM TicketPriority = 1
	TicketPriority_HIGH   TicketPriority = 2
	TicketPriority_URGENT TicketPriority = 3
)

// Enum value maps for TicketPriority.
var (
	TicketPriority_name = map[int32]string{
		0: "LOW",
		1: "MEDIUM",
		2: "HIGH",
		3: "URGENT",
	}
	TicketPriority_value = map[string]int32{
		"LOW":    0,
		"MEDIUM": 1,
		"HIGH":   2,
		"URGENT": 3,
	}
)

func (x TicketPriority) Enum() *TicketPriority {
	p := new(TicketPriority)
	*p = x
	return p
}

func (x TicketPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_ticket_ticket_proto_enumTypes[1].Descriptor()
}

func (TicketPriority) Type() protoreflect.EnumType {
	return &file_ticket_ticket_proto_enumTypes[1]
}

func (x TicketPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketPriority.Descriptor instead.
func (TicketPriority) EnumDescriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{1}
}

type TicketCategory int32

const (
	TicketCategory_HARDWARE TicketCategory = 0
	TicketCategory_SOFTWARE TicketCategory = 1
	TicketCategory_NETWORK  TicketCategory = 2
	TicketCategory_ACCESS   TicketCategory = 3
	TicketCategory_GENERAL  TicketCategory = 4
)

// Enum value maps for TicketCategory.
var (
	TicketCategory_name = map[int32]string{
		0: "HARDWARE",
		1: "SOFTWARE",
		2: "NETWORK",
		3: "ACCESS",
		4: "GENERAL",
	}
	TicketCategory_value = map[string]int32{
		"HARDWARE": 0,
		"SOFTWARE": 1,
		"NETWORK":  2,
		"ACCESS":   3,
		"GENERAL":  4,
	}
)

func (x TicketCategory) Enum() *TicketCategory {
	p := new(TicketCategory)
	*p = x
	return p
}

func (x TicketCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_ticket_ticket_proto_enumTypes[2].Descriptor()
}

func (TicketCategory) Type() protoreflect.EnumType {
	return &file_ticket_ticket_proto_enumTypes[2]
}

func (x TicketCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketCategory.Descriptor instead.
func (TicketCategory) EnumDescriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{2}
}

type Ticket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Category      TicketCategory         `protobuf:"varint,4,opt,name=category,proto3,enum=ticket.TicketCategory" json:"category,omitempty"`
	Priority      TicketPriority         `protobuf:"varint,5,opt,name=priority,proto3,enum=ticket.TicketPriority" json:"priority,omitempty"`
	Status        TicketStatus           `protobuf:"varint,6,opt,name=status,proto3,enum=ticket.TicketStatus" json:"status,omitempty"`
	RequesterId   string                 `protobuf:"bytes,7,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	AssigneeId    string                 `protobuf:"bytes,8,opt,name=assignee_id,json=assigneeId,proto3" json:"assignee_id,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ResolvedAt    string                 `protobuf:"bytes,11,opt,name=resolved_at,json=resolvedAt,proto3" json:"resolved_at,omitempty"`
	Tags          []string               `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	mi := &file_ticket_ticket_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *Ticket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ticket) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Ticket) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ticket) GetCategory() TicketCategory {
	if x != nil {
		return x.Category
	}
	return TicketCategory_HARDWARE
}

func (x *Ticket) GetPriority() TicketPriority {
	if x != nil {
		return x.Priority
	}
	return TicketPriority_LOW
}

func (x *Ticket) GetStatus() TicketStatus {
	if x != nil {
		return x.Status
	}
	return TicketStatus_OPEN
}

func (x *Ticket) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *Ticket) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *Ticket) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Ticket) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Ticket) GetResolvedAt() string {
	if x != nil {
		return x.ResolvedAt
	}
	return ""
}

func (x *Ticket) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TicketComment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TicketId      string                 `protobuf:"bytes,2,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	IsInternal    bool                   `protobuf:"varint,6,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketComment) Reset() {
	*x = TicketComment{}
	mi := &file_ticket_ticket_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketComment) ProtoMessage() {}

func (x *TicketComment) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketComment.ProtoReflect.Descriptor instead.
func (*TicketComment) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{1}
}

func (x *TicketComment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketComment) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *TicketComment) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TicketComment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TicketComment) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TicketComment) GetIsInternal() bool {
	if x != nil {
		return x.IsInternal
	}
	return false
}

type CreateTicketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Category      TicketCategory         `protobuf:"varint,3,opt,name=category,proto3,enum=ticket.TicketCategory" json:"category,omitempty"`
	Priority      TicketPriority         `protobuf:"varint,4,opt,name=priority,proto3,enum=ticket.TicketPriority" json:"priority,omitempty"`
	RequesterId   string                 `protobuf:"bytes,5,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	Tags          []string               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTicketRequest) Reset() {
	*x = CreateTicketRequest{}
	mi := &file_ticket_ticket_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketRequest) ProtoMessage() {}

func (x *CreateTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketRequest.ProtoReflect.Descriptor instead.
func (*CreateTicketRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTicketRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateTicketRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTicketRequest) GetCategory() TicketCategory {
	if x != nil {
		return x.Category
	}
	return TicketCategory_HARDWARE
}

func (x *CreateTicketRequest) GetPriority() TicketPriority {
	if x != nil {
		return x.Priority
	}
	return TicketPriority_LOW
}

func (x *CreateTicketRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *CreateTicketRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateTicketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticket        *Ticket                `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTicketResponse) Reset() {
	*x = CreateTicketResponse{}
	mi := &file_ticket_ticket_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketResponse) ProtoMessage() {}

func (x *CreateTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketResponse.ProtoReflect.Descriptor instead.
func (*CreateTicketResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTicketResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type GetTicketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTicketRequest) Reset() {
	*x = GetTicketRequest{}
	mi := &file_ticket_ticket_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketRequest) ProtoMessage() {}

func (x *GetTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketRequest.ProtoReflect.Descriptor instead.
func (*GetTicketRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{4}
}

func (x *GetTicketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTicketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticket        *Ticket                `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTicketResponse) Reset() {
	*x = GetTicketResponse{}
	mi := &file_ticket_ticket_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketResponse) ProtoMessage() {}

func (x *GetTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketResponse.ProtoReflect.Descriptor instead.
func (*GetTicketResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{5}
}

func (x *GetTicketResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type UpdateTicketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Category      TicketCategory         `protobuf:"varint,4,opt,name=category,proto3,enum=ticket.TicketCategory" json:"category,omitempty"`
	Priority      TicketPriority         `protobuf:"varint,5,opt,name=priority,proto3,enum=ticket.TicketPriority" json:"priority,omitempty"`
	Status        TicketStatus           `protobuf:"varint,6,opt,name=status,proto3,enum=ticket.TicketStatus" json:"status,omitempty"`
	AssigneeId    string                 `protobuf:"bytes,7,opt,name=assignee_id,json=assigneeId,proto3" json:"assignee_id,omitempty"`
	Tags          []string               `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTicketRequest) Reset() {
	*x = UpdateTicketRequest{}
	mi := &file_ticket_ticket_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTicketRequest) ProtoMessage() {}

func (x *UpdateTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTicketRequest.ProtoReflect.Descriptor instead.
func (*UpdateTicketRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTicketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTicketRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateTicketRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTicketRequest) GetCategory() TicketCategory {
	if x != nil {
		return x.Category
	}
	return TicketCategory_HARDWARE
}

func (x *UpdateTicketRequest) GetPriority() TicketPriority {
	if x != nil {
		return x.Priority
	}
	return TicketPriority_LOW
}

func (x *UpdateTicketRequest) GetStatus() TicketStatus {
	if x != nil {
		return x.Status
	}
	return TicketStatus_OPEN
}

func (x *UpdateTicketRequest) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *UpdateTicketRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateTicketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticket        *Ticket                `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTicketResponse) Reset() {
	*x = UpdateTicketResponse{}
	mi := &file_ticket_ticket_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTicketResponse) ProtoMessage() {}

func (x *UpdateTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTicketResponse.ProtoReflect.Descriptor instead.
func (*UpdateTicketResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTicketResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type CloseTicketRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ResolutionNotes string                 `protobuf:"bytes,2,opt,name=resolution_notes,json=resolutionNotes,proto3" json:"resolution_notes,omitempty"`
	ClosedBy        string                 `protobuf:"bytes,3,opt,name=closed_by,json=closedBy,proto3" json:"closed_by,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CloseTicketRequest) Reset() {
	*x = CloseTicketRequest{}
	mi := &file_ticket_ticket_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTicketRequest) ProtoMessage() {}

func (x *CloseTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTicketRequest.ProtoReflect.Descriptor instead.
func (*CloseTicketRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{8}
}

func (x *CloseTicketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloseTicketRequest) GetResolutionNotes() string {
	if x != nil {
		return x.ResolutionNotes
	}
	return ""
}

func (x *CloseTicketRequest) GetClosedBy() string {
	if x != nil {
		return x.ClosedBy
	}
	return ""
}

type CloseTicketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticket        *Ticket                `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseTicketResponse) Reset() {
	*x = CloseTicketResponse{}
	mi := &file_ticket_ticket_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTicketResponse) ProtoMessage() {}

func (x *CloseTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTicketResponse.ProtoReflect.Descriptor instead.
func (*CloseTicketResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{9}
}

func (x *CloseTicketResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type ListTicketsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Status        TicketStatus           `protobuf:"varint,3,opt,name=status,proto3,enum=ticket.TicketStatus" json:"status,omitempty"`
	Priority      TicketPriority         `protobuf:"varint,4,opt,name=priority,proto3,enum=ticket.TicketPriority" json:"priority,omitempty"`
	Category      TicketCategory         `protobuf:"varint,5,opt,name=category,proto3,enum=ticket.TicketCategory" json:"category,omitempty"`
	AssigneeId    string                 `protobuf:"bytes,6,opt,name=assignee_id,json=assigneeId,proto3" json:"assignee_id,omitempty"`
	RequesterId   string                 `protobuf:"bytes,7,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTicketsRequest) Reset() {
	*x = ListTicketsRequest{}
	mi := &file_ticket_ticket_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketsRequest) ProtoMessage() {}

func (x *ListTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketsRequest.ProtoReflect.Descriptor instead.
func (*ListTicketsRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{10}
}

func (x *ListTicketsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTicketsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTicketsRequest) GetStatus() TicketStatus {
	if x != nil {
		return x.Status
	}
	return TicketStatus_OPEN
}

func (x *ListTicketsRequest) GetPriority() TicketPriority {
	if x != nil {
		return x.Priority
	}
	return TicketPriority_LOW
}

func (x *ListTicketsRequest) GetCategory() TicketCategory {
	if x != nil {
		return x.Category
	}
	return TicketCategory_HARDWARE
}

func (x *ListTicketsRequest) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *ListTicketsRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

type ListTicketsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tickets       []*Ticket              `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTicketsResponse) Reset() {
	*x = ListTicketsResponse{}
	mi := &file_ticket_ticket_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketsResponse) ProtoMessage() {}

func (x *ListTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketsResponse.ProtoReflect.Descriptor instead.
func (*ListTicketsResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{11}
}

func (x *ListTicketsResponse) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *ListTicketsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTicketsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTicketsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetUserTicketsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status        TicketStatus           `protobuf:"varint,2,opt,name=status,proto3,enum=ticket.TicketStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTicketsRequest) Reset() {
	*x = GetUserTicketsRequest{}
	mi := &file_ticket_ticket_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTicketsRequest) ProtoMessage() {}

func (x *GetUserTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTicketsRequest.ProtoReflect.Descriptor instead.
func (*GetUserTicketsRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserTicketsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserTicketsRequest) GetStatus() TicketStatus {
	if x != nil {
		return x.Status
	}
	return TicketStatus_OPEN
}

type GetUserTicketsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tickets       []*Ticket              `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTicketsResponse) Reset() {
	*x = GetUserTicketsResponse{}
	mi := &file_ticket_ticket_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTicketsResponse) ProtoMessage() {}

func (x *GetUserTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTicketsResponse.ProtoReflect.Descriptor instead.
func (*GetUserTicketsResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserTicketsResponse) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type AddCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TicketId      string                 `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	IsInternal    bool                   `protobuf:"varint,4,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCommentRequest) Reset() {
	*x = AddCommentRequest{}
	mi := &file_ticket_ticket_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentRequest) ProtoMessage() {}

func (x *AddCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentRequest.ProtoReflect.Descriptor instead.
func (*AddCommentRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{14}
}

func (x *AddCommentRequest) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *AddCommentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddCommentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddCommentRequest) GetIsInternal() bool {
	if x != nil {
		return x.IsInternal
	}
	return false
}

type AddCommentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comment       *TicketComment         `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCommentResponse) Reset() {
	*x = AddCommentResponse{}
	mi := &file_ticket_ticket_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentResponse) ProtoMessage() {}

func (x *AddCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentResponse.ProtoReflect.Descriptor instead.
func (*AddCommentResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{15}
}

func (x *AddCommentResponse) GetComment() *TicketComment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type GetCommentsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TicketId        string                 `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	IncludeInternal bool                   `protobuf:"varint,2,opt,name=include_internal,json=includeInternal,proto3" json:"include_internal,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetCommentsRequest) Reset() {
	*x = GetCommentsRequest{}
	mi := &file_ticket_ticket_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentsRequest) ProtoMessage() {}

func (x *GetCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentsRequest.ProtoReflect.Descriptor instead.
func (*GetCommentsRequest) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{16}
}

func (x *GetCommentsRequest) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *GetCommentsRequest) GetIncludeInternal() bool {
	if x != nil {
		return x.IncludeInternal
	}
	return false
}

type GetCommentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comments      []*TicketComment       `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentsResponse) Reset() {
	*x = GetCommentsResponse{}
	mi := &file_ticket_ticket_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentsResponse) ProtoMessage() {}

func (x *GetCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_ticket_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentsResponse.ProtoReflect.Descriptor instead.
func (*GetCommentsResponse) Descriptor() ([]byte, []int) {
	return file_ticket_ticket_proto_rawDescGZIP(), []int{17}
}

func (x *GetCommentsResponse) GetComments() []*TicketComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

var File_ticket_ticket_proto protoreflect.FileDescriptor

const file_ticket_ticket_proto_rawDesc = "" +
	"\n" +
	"\x13ticket/ticket.proto\x12\x06ticket\"\x9d\x03\n" +
	"\x06Ticket\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x122\n" +
	"\bcategory\x18\x04 \x01(\x0e2\x16.ticket.TicketCategoryR\bcategory\x122\n" +
	"\bpriority\x18\x05 \x01(\x0e2\x16.ticket.TicketPriorityR\bpriority\x12,\n" +
	"\x06status\x18\x06 \x01(\x0e2\x14.ticket.TicketStatusR\x06status\x12!\n" +
	"\frequester_id\x18\a \x01(\tR\vrequesterId\x12\x1f\n" +
	"\vassignee_id\x18\b \x01(\tR\n" +
	"assigneeId\x12\x1d\n" +
	"\n" +
	"created_at\x18\t \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\tR\tupdatedAt\x12\x1f\n" +
	"\vresolved_at\x18\v \x01(\tR\n" +
	"resolvedAt\x12\x12\n" +
	"\x04tags\x18\f \x03(\tR\x04tags\"\xaf\x01\n" +
	"\rTicketComment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tticket_id\x18\x02 \x01(\tR\bticketId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12\x1d\n" +
	"\n" +
	"created_at\x18\x05 \x01(\tR\tcreatedAt\x12\x1f\n" +
	"\vis_internal\x18\x06 \x01(\bR\n" +
	"isInternal\"\xec\x01\n" +
	"\x13CreateTicketRequest\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x122\n" +
	"\bcategory\x18\x03 \x01(\x0e2\x16.ticket.TicketCategoryR\bcategory\x122\n" +
	"\bpriority\x18\x04 \x01(\x0e2\x16.ticket.TicketPriorityR\bpriority\x12!\n" +
	"\frequester_id\x18\x05 \x01(\tR\vrequesterId\x12\x12\n" +
	"\x04tags\x18\x06 \x03(\tR\x04tags\">\n" +
	"\x14CreateTicketResponse\x12&\n" +
	"\x06ticket\x18\x01 \x01(\v2\x0e.ticket.TicketR\x06ticket\"\"\n" +
	"\x10GetTicketRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\";\n" +
	"\x11GetTicketResponse\x12&\n" +
	"\x06ticket\x18\x01 \x01(\v2\x0e.ticket.TicketR\x06ticket\"\xa8\x02\n" +
	"\x13UpdateTicketRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x122\n" +
	"\bcategory\x18\x04 \x01(\x0e2\x16.ticket.TicketCategoryR\bcategory\x122\n" +
	"\bpriority\x18\x05 \x01(\x0e2\x16.ticket.TicketPriorityR\bpriority\x12,\n" +
	"\x06status\x18\x06 \x01(\x0e2\x14.ticket.TicketStatusR\x06status\x12\x1f\n" +
	"\vassignee_id\x18\a \x01(\tR\n" +
	"assigneeId\x12\x12\n" +
	"\x04tags\x18\b \x03(\tR\x04tags\">\n" +
	"\x14UpdateTicketResponse\x12&\n" +
	"\x06ticket\x18\x01 \x01(\v2\x0e.ticket.TicketR\x06ticket\"l\n" +
	"\x12CloseTicketRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12)\n" +
	"\x10resolution_notes\x18\x02 \x01(\tR\x0fresolutionNotes\x12\x1b\n" +
	"\tclosed_by\x18\x03 \x01(\tR\bclosedBy\"=\n" +
	"\x13CloseTicketResponse\x12&\n" +
	"\x06ticket\x18\x01 \x01(\v2\x0e.ticket.TicketR\x06ticket\"\x9f\x02\n" +
	"\x12ListTicketsRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12,\n" +
	"\x06status\x18\x03 \x01(\x0e2\x14.ticket.TicketStatusR\x06status\x122\n" +
	"\bpriority\x18\x04 \x01(\x0e2\x16.ticket.TicketPriorityR\bpriority\x122\n" +
	"\bcategory\x18\x05 \x01(\x0e2\x16.ticket.TicketCategoryR\bcategory\x12\x1f\n" +
	"\vassignee_id\x18\x06 \x01(\tR\n" +
	"assigneeId\x12!\n" +
	"\frequester_id\x18\a \x01(\tR\vrequesterId\"\x86\x01\n" +
	"\x13ListTicketsResponse\x12(\n" +
	"\atickets\x18\x01 \x03(\v2\x0e.ticket.TicketR\atickets\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x05R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"^\n" +
	"\x15GetUserTicketsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12,\n" +
	"\x06status\x18\x02 \x01(\x0e2\x14.ticket.TicketStatusR\x06status\"B\n" +
	"\x16GetUserTicketsResponse\x12(\n" +
	"\atickets\x18\x01 \x03(\v2\x0e.ticket.TicketR\atickets\"\x84\x01\n" +
	"\x11AddCommentRequest\x12\x1b\n" +
	"\tticket_id\x18\x01 \x01(\tR\bticketId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12\x1f\n" +
	"\vis_internal\x18\x04 \x01(\bR\n" +
	"isInternal\"E\n" +
	"\x12AddCommentResponse\x12/\n" +
	"\acomment\x18\x01 \x01(\v2\x15.ticket.TicketCommentR\acomment\"\\\n" +
	"\x12GetCommentsRequest\x12\x1b\n" +
	"\tticket_id\x18\x01 \x01(\tR\bticketId\x12)\n" +
	"\x10include_internal\x18\x02 \x01(\bR\x0fincludeInternal\"H\n" +
	"\x13GetCommentsResponse\x121\n" +
	"\bcomments\x18\x01 \x03(\v2\x15.ticket.TicketCommentR\bcomments*P\n" +
	"\fTicketStatus\x12\b\n" +
	"\x04OPEN\x10\x00\x12\x0f\n" +
	"\vIN_PROGRESS\x10\x01\x12\v\n" +
	"\aPENDING\x10\x02\x12\f\n" +
	"\bRESOLVED\x10\x03\x12\n" +
	"\n" +
	"\x06CLOSED\x10\x04*;\n" +
	"\x0eTicketPriority\x12\a\n" +
	"\x03LOW\x10\x00\x12\n" +
	"\n" +
	"\x06MEDIUM\x10\x01\x12\b\n" +
	"\x04HIGH\x10\x02\x12\n" +
	"\n" +
	"\x06URGENT\x10\x03*R\n" +
	"\x0eTicketCategory\x12\f\n" +
	"\bHARDWARE\x10\x00\x12\f\n" +
	"\bSOFTWARE\x10\x01\x12\v\n" +
	"\aNETWORK\x10\x02\x12\n" +
	"\n" +
	"\x06ACCESS\x10\x03\x12\v\n" +
	"\aGENERAL\x10\x042\xd5\x04\n" +
	"\rTicketService\x12I\n" +
	"\fCreateTicket\x12\x1b.ticket.CreateTicketRequest\x1a\x1c.ticket.CreateTicketResponse\x12@\n" +
	"\tGetTicket\x12\x18.ticket.GetTicketRequest\x1a\x19.ticket.GetTicketResponse\x12I\n" +
	"\fUpdateTicket\x12\x1b.ticket.UpdateTicketRequest\x1a\x1c.ticket.UpdateTicketResponse\x12F\n" +
	"\vCloseTicket\x12\x1a.ticket.CloseTicketRequest\x1a\x1b.ticket.CloseTicketResponse\x12F\n" +
	"\vListTickets\x12\x1a.ticket.ListTicketsRequest\x1a\x1b.ticket.ListTicketsResponse\x12O\n" +
	"\x0eGetUserTickets\x12\x1d.ticket.GetUserTicketsRequest\x1a\x1e.ticket.GetUserTicketsResponse\x12C\n" +
	"\n" +
	"AddComment\x12\x19.ticket.AddCommentRequest\x1a\x1a.ticket.AddCommentResponse\x12F\n" +
	"\vGetComments\x12\x1a.ticket.GetCommentsRequest\x1a\x1b.ticket.GetCommentsResponseB&Z$internal-support-system/proto/ticketb\x06proto3"

var (
	file_ticket_ticket_proto_rawDescOnce sync.Once
	file_ticket_ticket_proto_rawDescData []byte
)

func file_ticket_ticket_proto_rawDescGZIP() []byte {
	file_ticket_ticket_proto_rawDescOnce.Do(func() {
		file_ticket_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ticket_ticket_proto_rawDesc), len(file_ticket_ticket_proto_rawDesc)))
	})
	return file_ticket_ticket_proto_rawDescData
}

var file_ticket_ticket_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ticket_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_ticket_ticket_proto_goTypes = []any{
	(TicketStatus)(0),              // 0: ticket.TicketStatus
	(TicketPriority)(0),            // 1: ticket.TicketPriority
	(TicketCategory)(0),            // 2: ticket.TicketCategory
	(*Ticket)(nil),                 // 3: ticket.Ticket
	(*TicketComment)(nil),          // 4: ticket.TicketComment
	(*CreateTicketRequest)(nil),    // 5: ticket.CreateTicketRequest
	(*CreateTicketResponse)(nil),   // 6: ticket.CreateTicketResponse
	(*GetTicketRequest)(nil),       // 7: ticket.GetTicketRequest
	(*GetTicketResponse)(nil),      // 8: ticket.GetTicketResponse
	(*UpdateTicketRequest)(nil),    // 9: ticket.UpdateTicketRequest
	(*UpdateTicketResponse)(nil),   // 10: ticket.UpdateTicketResponse
	(*CloseTicketRequest)(nil),     // 11: ticket.CloseTicketRequest
	(*CloseTicketResponse)(nil),    // 12: ticket.CloseTicketResponse
	(*ListTicketsRequest)(nil),     // 13: ticket.ListTicketsRequest
	(*ListTicketsResponse)(nil),    // 14: ticket.ListTicketsResponse
	(*GetUserTicketsRequest)(nil),  // 15: ticket.GetUserTicketsRequest
	(*GetUserTicketsResponse)(nil), // 16: ticket.GetUserTicketsResponse
	(*AddCommentRequest)(nil),      // 17: ticket.AddCommentRequest
	(*AddCommentResponse)(nil),     // 18: ticket.AddCommentResponse
	(*GetCommentsRequest)(nil),     // 19: ticket.GetCommentsRequest
	(*GetCommentsResponse)(nil),    // 20: ticket.GetCommentsResponse
}
var file_ticket_ticket_proto_depIdxs = []int32{
	2,  // 0: ticket.Ticket.category:type_name -> ticket.TicketCategory
	1,  // 1: ticket.Ticket.priority:type_name -> ticket.TicketPriority
	0,  // 2: ticket.Ticket.status:type_name -> ticket.TicketStatus
	2,  // 3: ticket.CreateTicketRequest.category:type_name -> ticket.TicketCategory
	1,  // 4: ticket.CreateTicketRequest.priority:type_name -> ticket.TicketPriority
	3,  // 5: ticket.CreateTicketResponse.ticket:type_name -> ticket.Ticket
	3,  // 6: ticket.GetTicketResponse.ticket:type_name -> ticket.Ticket
	2,  // 7: ticket.UpdateTicketRequest.category:type_name -> ticket.TicketCategory
	1,  // 8: ticket.UpdateTicketRequest.priority:type_name -> ticket.TicketPriority
	0,  // 9: ticket.UpdateTicketRequest.status:type_name -> ticket.TicketStatus
	3,  // 10: ticket.UpdateTicketResponse.ticket:type_name -> ticket.Ticket
	3,  // 11: ticket.CloseTicketResponse.ticket:type_name -> ticket.Ticket
	0,  // 12: ticket.ListTicketsRequest.status:type_name -> ticket.TicketStatus
	1,  // 13: ticket.ListTicketsRequest.priority:type_name -> ticket.TicketPriority
	2,  // 14: ticket.ListTicketsRequest.category:type_name -> ticket.TicketCategory
	3,  // 15: ticket.ListTicketsResponse.tickets:type_name -> ticket.Ticket
	0,  // 16: ticket.GetUserTicketsRequest.status:type_name -> ticket.TicketStatus
	3,  // 17: ticket.GetUserTicketsResponse.tickets:type_name -> ticket.Ticket
	4,  // 18: ticket.AddCommentResponse.comment:type_name -> ticket.TicketComment
	4,  // 19: ticket.GetCommentsResponse.comments:type_name -> ticket.TicketComment
	5,  // 20: ticket.TicketService.CreateTicket:input_type -> ticket.CreateTicketRequest
	7,  // 21: ticket.TicketService.GetTicket:input_type -> ticket.GetTicketRequest
	9,  // 22: ticket.TicketService.UpdateTicket:input_type -> ticket.UpdateTicketRequest
	11, // 23: ticket.TicketService.CloseTicket:input_type -> ticket.CloseTicketRequest
	13, // 24: ticket.TicketService.ListTickets:input_type -> ticket.ListTicketsRequest
	15, // 25: ticket.TicketService.GetUserTickets:input_type -> ticket.GetUserTicketsRequest
	17, // 26: ticket.TicketService.AddComment:input_type -> ticket.AddCommentRequest
	19, // 27: ticket.TicketService.GetComments:input_type -> ticket.GetCommentsRequest
	6,  // 28: ticket.TicketService.CreateTicket:output_type -> ticket.CreateTicketResponse
	8,  // 29: ticket.TicketService.GetTicket:output_type -> ticket.GetTicketResponse
	10, // 30: ticket.TicketService.UpdateTicket:output_type -> ticket.UpdateTicketResponse
	12, // 31: ticket.TicketService.CloseTicket:output_type -> ticket.CloseTicketResponse
	14, // 32: ticket.TicketService.ListTickets:output_type -> ticket.ListTicketsResponse
	16, // 33: ticket.TicketService.GetUserTickets:output_type -> ticket.GetUserTicketsResponse
	18, // 34: ticket.TicketService.AddComment:output_type -> ticket.AddCommentResponse
	20, // 35: ticket.TicketService.GetComments:output_type -> ticket.GetCommentsResponse
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_ticket_ticket_proto_init() }
func file_ticket_ticket_proto_init() {
	if File_ticket_ticket_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ticket_ticket_proto_rawDesc), len(file_ticket_ticket_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ticket_ticket_proto_goTypes,
		DependencyIndexes: file_ticket_ticket_proto_depIdxs,
		EnumInfos:         file_ticket_ticket_proto_enumTypes,
		MessageInfos:      file_ticket_ticket_proto_msgTypes,
	}.Build()
	File_ticket_ticket_proto = out.File
	file_ticket_ticket_proto_goTypes = nil
	file_ticket_ticket_proto_depIdxs = nil
}
